{
  "author": {
    "name": "Ben Newman",
    "email": "bn@cs.stanford.edu"
  },
  "name": "ast-types",
  "description": "Esprima-compatible implementation of the Mozilla JS Parser API",
  "keywords": [
    "ast",
    "abstract syntax tree",
    "hierarchy",
    "mozilla",
    "spidermonkey",
    "parser api",
    "esprima",
    "types",
    "type system",
    "type checking",
    "dynamic types",
    "parsing",
    "transformation",
    "syntax"
  ],
  "version": "0.2.18",
  "homepage": "http://github.com/benjamn/ast-types",
  "repository": {
    "type": "git",
    "url": "git://github.com/benjamn/ast-types.git"
  },
  "main": "main.js",
  "scripts": {
    "test": "whiskey test/run.js"
  },
  "dependencies": {
    "esprima": ">= 1.0.3",
    "whiskey": "0.6.x"
  },
  "devDependencies": {},
  "optionalDependencies": {
    "esprima": ">= 1.0.3",
    "whiskey": "0.6.x"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "readme": "AST Types\n===\n\nThis module provides an efficient, modular,\n[Esprima](https://github.com/ariya/esprima)-compatible implementation of\nthe [abstract syntax\ntree](http://en.wikipedia.org/wiki/Abstract_syntax_tree) type hierarchy\npioneered by the [Mozilla Parser\nAPI](https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API).\n\n[![Build Status](https://travis-ci.org/benjamn/ast-types.png?branch=master)](https://travis-ci.org/benjamn/ast-types)\n\nInstallation\n---\n\nFrom NPM:\n\n    npm install ast-types\n\nFrom GitHub:\n\n    cd path/to/node_modules\n    git clone git://github.com/benjamn/ast-types.git\n    cd ast-types\n    npm install .\n\nBasic Usage\n---\n```js\nvar assert = require(\"assert\");\nvar n = require(\"ast-types\").namedTypes;\nvar b = require(\"ast-types\").builders;\n\nvar fooId = b.identifier(\"foo\");\nvar ifFoo = b.ifStatement(fooId, b.blockStatement([\n    b.expressionStatement(b.callExpression(fooId, []))\n]));\n\nassert.ok(n.IfStatement.check(ifFoo));\nassert.ok(n.Statement.check(ifFoo));\nassert.ok(n.Node.check(ifFoo));\n\nassert.ok(n.BlockStatement.check(ifFoo.consequent));\nassert.strictEqual(\n    ifFoo.consequent.body[0].expression.arguments.length,\n    0);\n\nassert.strictEqual(ifFoo.test, fooId);\nassert.ok(n.Expression.check(ifFoo.test));\nassert.ok(n.Identifier.check(ifFoo.test));\nassert.ok(!n.Statement.check(ifFoo.test));\n```\n\nCustom AST Node Types\n---\n\nThe `ast-types` module was designed to be extended. To that end, it\nprovides a readable, declarative syntax for specifying new AST node types,\nbased primarily upon the `require(\"ast-types\").Type.def` function:\n```js\nvar types = require(\"ast-types\");\nvar def = types.Type.def;\nvar string = types.builtInTypes.string;\nvar b = types.builders;\n\n// Suppose you need a named File type to wrap your Programs.\ndef(\"File\")\n    .bases(\"Node\")\n    .build(\"name\", \"program\")\n    .field(\"name\", string)\n    .field(\"program\", def(\"Program\"));\n\n// Prevent further modifications to the File type (and any other\n// types newly introduced by def(...)).\ntypes.finalize();\n\n// The b.file builder function is now available. It expects two\n// arguments, as named by .build(\"name\", \"program\") above.\nvar main = b.file(\"main.js\", b.program([\n    // Pointless program contents included for extra color.\n    b.functionDeclaration(b.identifier(\"succ\"), [\n        b.identifier(\"x\")\n    ], b.blockStatement([\n        b.returnStatement(\n            b.binaryExpression(\n                \"+\", b.identifier(\"x\"), b.literal(1)\n            )\n        )\n    ]))\n]));\n\nassert.strictEqual(main.name, \"main.js\");\nassert.strictEqual(main.program.body[0].params[0].name, \"x\");\n// etc.\n\n// If you pass the wrong type of arguments, or fail to pass enough\n// arguments, an AssertionError will be thrown.\n\nb.file(b.blockStatement([]));\n// ==> AssertionError: {\"body\":[],\"type\":\"BlockStatement\",\"loc\":null} does not match type string\n\nb.file(\"lib/types.js\", b.thisExpression());\n// ==> AssertionError: {\"type\":\"ThisExpression\",\"loc\":null} does not match type Program\n```\nThe `def` syntax is used to define all the default AST node types found in\nhttps://github.com/benjamn/ast-types/blob/master/lib/core.js,\nhttps://github.com/benjamn/ast-types/blob/master/lib/es6.js,\nhttps://github.com/benjamn/ast-types/blob/master/lib/mozilla.js,\nhttps://github.com/benjamn/ast-types/blob/master/lib/e4x.js, and\nhttps://github.com/benjamn/ast-types/blob/master/lib/xjs.js, so you have\nno shortage of examples to learn from.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/benjamn/ast-types/issues"
  },
  "_id": "ast-types@0.2.18",
  "dist": {
    "shasum": "10473e2a1503e9e0fe614f1c8ff611da8becd6b0"
  },
  "_from": "ast-types@>= 0.2.18",
  "_resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.2.18.tgz"
}
